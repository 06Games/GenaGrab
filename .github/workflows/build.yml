name: Build and test

on:
  push:
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.100' # The .NET SDK version to use

jobs:
  build:
    name: "Build"
    strategy:
      matrix:
        kind: [ 'linux', 'windows', 'macOS' ]
        include:
          - kind: linux
            os: ubuntu-latest
            target: linux-x64
          - kind: windows
            os: windows-latest
            target: win-x64
          - kind: macOS
            os: macos-latest
            target: osx-x64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        shell: bash
        run: |
          dotnet restore
          
          if [ "${{ matrix.target }}" == "win-x64" ]; then
            dotnet tool install -g wix --version 4.*
          elif [ "${{ matrix.target }}" == "osx-x64" ]; then
            brew install create-dmg
          elif [ "${{ matrix.target }}" == "linux-x64" ]; then
            dotnet tool install -g KuiperZone.PupNet
            sudo apt update & sudo apt install libfuse2
          fi

      - name: Define some variables
        shell: bash
        run: |
          echo "release_name="GeneaGrab-${{ matrix.target }}"" >> "$GITHUB_ENV"
          echo "version=$(git describe --tags --abbrev=0 | cut -c2- | cut -d '.' -f -3)" >> "$GITHUB_ENV"
          echo "build=$(git rev-list --all --count)" >> "$GITHUB_ENV"

      - name: Set app version
        shell: bash
        run: |
          if [ `echo -n ${version//[^.]} | wc -c` -ne 2 ]; then 
            echo "::error title={Invalid version}::{$version isn't a valid version, versions are expected to follow the format #.#.#}"
            exit 1
          fi
          if [ "${{ matrix.target }}" == "osx-x64" ]; then
            plutil -replace CFBundleShortVersionString -string "$version" "GeneaGrab/Info.plist"
            plutil -replace CFBundleVersion -string "$build" "GeneaGrab/Info.plist"
          fi
          sed -i -r "s/= new\(.*?\)/= new(${version//./,},$build)/" "GeneaGrab/App.cs"

      - name: Publish the project
        shell: bash
        run: |
          if [ "${{ matrix.target }}" == "osx-x64" ]; then
            dotnet publish -r "${{ matrix.target }}" -c Release --self-contained -p:PublishDir="$release_name" -p:UseAppHost=true
          elif [ "${{ matrix.target }}" == "linux-x64" ]; then
            for kind in appimage deb rpm zip
            do
                pupnet --runtime "${{ matrix.target }}" -y --kind $kind --app-version "$version[$build]"
            done
          else
            dotnet publish -r "${{ matrix.target }}" -c Release --self-contained -p:PublishDir="$release_name"
          fi

      - name: Generate .app package
        if: ${{ matrix.target == 'osx-x64' }}
        shell: bash
        run: |
          APP_NAME="GeneaGrab/GeneaGrab.app"
          PUBLISH_OUTPUT_DIRECTORY="GeneaGrab/${release_name}/."
          INFO_PLIST="GeneaGrab/Info.plist"
          ICON_FILE="GeneaGrab/Assets/Logo/GeneaGrab.icns"
          
          if [ -d "$APP_NAME" ]; then
            rm -rf "$APP_NAME"
          fi
          
          mkdir "$APP_NAME"
          
          mkdir "$APP_NAME/Contents"
          mkdir "$APP_NAME/Contents/MacOS"
          mkdir "$APP_NAME/Contents/Resources"
          
          cp "$INFO_PLIST" "$APP_NAME/Contents/Info.plist"
          cp "$ICON_FILE" "$APP_NAME/Contents/Resources/$(basename $ICON_FILE)"
          cp -a "$PUBLISH_OUTPUT_DIRECTORY" "$APP_NAME/Contents/MacOS"

      - name: Pack for distribution
        shell: bash
        run: |
          cd GeneaGrab/
          mkdir output
          if [ "${{ matrix.target }}" == "win-x64" ]; then
            echo "[INFO] Generating installer"
            wix extension add -g WixToolset.UI.wixext/4
            wix build -ext WixToolset.UI.wixext -d Version=${version}.${build} -arch x64 -out "output/${release_name}-installer.msi" geneagrab.wxs
            rm "output/${release_name}-installer.wixpdb"
          
            echo "[INFO] Generating portable archive"
            7z a -tzip "output/${release_name}-portable.zip" "./${release_name}/*"
          elif [ "${{ matrix.target }}" == "osx-x64" ]; then
            create-dmg --volname "GeneaGrab Installer" --volicon "GeneaGrab.app/Contents/Resources/GeneaGrab.icns" --icon-size 100 --icon "GeneaGrab.app" 100 100 --hide-extension "GeneaGrab.app" --app-drop-link 375 100 "output/${release_name}.dmg" "./GeneaGrab.app/"
          else
            mv ../.out/* "output/"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: GeneaGrab/output/*

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: GeneaGrab/output/*
          draft: true

  test:
    name: "Test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore

      - name: Test
        run: |
          dotnet test --logger trx --results-directory test-results

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          files: |
            test-results/**/*.xml
            test-results/**/*.trx
            test-results/**/*.json